<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">

<head>
    <title>Python for New Programmers</title>
    <meta name="version" content="S5 1.0" />
    <link rel="stylesheet" href="../../slides-css/ui/slides.css" type="text/css" media="projection" id="slideProj" />
    <link rel="stylesheet" href="../../slides-css/ui/opera.css" type="text/css" media="projection" id="operaFix" />
    <link rel="stylesheet" href="../../slides-css/ui/print.css" type="text/css" media="print" id="slidePrint" />
    <script src="../../slides-css/ui/slides.js" type="text/javascript"></script>
    <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1" />
</head>

<body>
<div class="layout">

<div id="currentSlide"></div>
    <div id="header"></div>
    <div id="footer">
    <h1>Clockwork Software Systems</h1>
    <h2>Python For New Programmers</h2>
    <div id="controls"></div>
    </div>
</div>


<div class="presentation">

<div class='slide'>
    <h1></h1>
    <blockquote>
        <br /><br />
        <h2>Python For New Programmers</h2>
        <h1>Reading in User Input</h1>
    </blockquote>
</div>



<div class="slide">
    <h1>Interacting With Your User</h1>
    <div class='handout'>
    Although some programs run all the way through without any user intervention, the majority of programs written today need to communicate with the user to determine the path that is going to be followed through the code
    </div>
    <ul>
        <li>Need to how to collect input from, and display output to, the user</li>
        <li>Already know how to display information - using </li>
            <ul><li><code>print</code></li></ul>
        <li>Use a simple function to collect text from the user</li>
            <ul><li><code>raw_input</code></li></ul>
    </ul>
</div>


<div class='slide'>
    <h1>The raw_input Function</h1>

    <ul>
        <li>Takes a parameter of the prompt string</li>
        <li>Returns a string of whatever the user typed at the prompt</li>
        <!--does it return the return char as well or not?-->
        <li><a target='new' href='py-html/simple-text-input.htm'>Code Example</a></li>
    </ul>
</div>

<div class='slide'>
    <h1>Displaying Strings with Embedded Variables</h1>
    <ul>
        <li>The concatenation used in the previous example can get a bit cumbersome, but there is a tidier way of displaying strings</li>
        <li>A particular style of string formatting can be used to insert variables into strings at different places</li>
        <li><a target='new' href='../string-formatting/formatting-slides.html'>String Formatting</a></li>
    </ul>
</div>

<div class='slide'>
    <h1>Using raw_input with Numbers</h1>
    <ul>
    <!-- plan:  try without casting.  Use input to show that works, then see what happens when you enter a string, then use raw_input and cast -->
        <li>If we're asking the user to enter numbers, we might want to perform some calculations with them</li>
        <li>If we want the user to enter two numbers, and to display the product of them, <a href='py-html/text-input-numbers-fails.htm'>this code</a> should do the trick</li>
        <li>What happens when we run it?</li>
    </ul>
</div>

<div class='slide'>
    <h1>Why didn't that work?</h1>
    <ul>
        <li>Its all to do with what Python lets you do with different data types</li>
        <li>And what data type is assigned to the information from raw_input</li>
        <li>Lets look some more at data types XXX INSERT LINK HERE XXX</li>
    </ul>
</div>

<div class='slide'>
    <h1>Trying a different function</h1>
    <ul>
        <li>Python offers us an alternative function that will give us the user input as a number</li>
        <li><code>input()</code></li>
        <li>See <a href='py-html/text-input-numbers-not-raw.htm'>this code</a></li>
        <li>See what happens when we run it, and enter integer numbers</li>
        <li>What about when we run it and enter floating point numbers?</li>
        <li>What do we need to do to get it to show the proper floating point calculation?</li>
        <li>See <a href='py-html/text-input-numbers-float.htm'>this code</a></li>
        <li>What if we try to enter a string into these examples?</li>
    </ul>
</div>

<div class='slide'>
    <h1>Forcing our input into a particular type</h1>
    <ul>
       <li>We know we can't specifiy a variable as only able to hold information of a particular type</li>
       <li>But we can force a piece of information to convert to a particular type<li>
       <li>This is called <i>casting</i></li>
       <li>See <a href='py-html/text-input-numbers-cast.htm'>this code</a> for an example of casting to an integer</li>
    </ul>
</div>

<div class='slide'>
    <h1>Building our first application</h1>
    <ul>
        <li>Previous exercises, with simple print statements, and a fixed order of execution are ok, but not much like the programs we use most of the time</li>
        <li>We want the user to be able to determine the flow of the program, or like with the algorithm we wrote for drawing sequares, determine the paramters for its operation</li>
        <li>We're going to start with a simple program that keeps doing something until we tell it to stop</li>
    </ul>
</div>

</div>

<p>
    <a href="http://validator.w3.org/check?uri=referer"><img
        src="http://www.w3.org/Icons/valid-xhtml10"
        alt="Valid XHTML 1.0!" height="31" width="88" /></a>
</p>
    
</body>
</html>
